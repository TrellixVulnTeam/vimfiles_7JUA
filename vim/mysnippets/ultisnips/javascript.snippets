snippet root "root" b
const _root = path.resolve(__dirname);

function root(args) \{
	args = Array.prototype.slice.call(arguments, 0);
	return path.join.apply(path, [_root].concat(args));
}
endsnippet

snippet gid "getElementById" b
${1:document}.getElementById('${2:id}');
endsnippet

snippet fori "for x in {}" b
for (var ${1:prop} in ${2:obj}) {
    if (${2:obj}.hasOwnProperty(${1:prop})) {
        ${3}
    }
}
endsnippet

snippet cl "console.log(...)" b
console.log($0);
endsnippet

snippet re "require" b
const `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub(r'[_\-]', '', lastPart)
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

snippet ajax
$.ajax({
	url: '${1:mydomain.com/url}',
	type: '${2:POST}',
	dataType: '${3:xml/html/script/json}',
	data: $.param( $('${4:Element or Expression}') ),
	complete: function (jqXHR, textStatus) {
		${5:// callback}
	},
	success: function (data, textStatus, jqXHR) {
		${6:// success callback}
	},
	error: function (jqXHR, textStatus, errorThrown) {
		${7:// error callback}
		console.log(textStatus, errorThrown);
	}
});
endsnippet


snippet jready "JQuery document ready handler" b
\$(function() {
    // let's get up in heeya
});
endsnippet


snippet ajaxquery "ajax get query example" b
function getName(personid) \{
	var dynamicData = \{};
	dynamicData["id"] = personID;
	return $.ajax(\{
		url: "getName.php",
		type: "get",
		data: dynamicData
	});
}

getName("2342342").done(function(data) \{
	// Updates the UI based the ajax result
	\$(".person-name").text(data.name); 
});
endsnippet


snippet ajaxerror-global "global ajaxError handler" b
\$( document ).ajaxError(function( event, request, settings ) \{
  \$( "#msg" ).append( "<li>Error requesting page " + settings.url + "</li>" );
});
endsnippet

snippet serv-express "Simple http server based expressjs" b
var express = require("express");
var webpackDevMiddleware = require("webpack-dev-middleware");
var webpack = require("webpack");
var webpackConfig = require("./webpack.config")();

var app = express();
var compiler = webpack(webpackConfig);

app.use(webpackDevMiddleware(compiler, \{
  // lazy: true,
  index: "index.html",
  publicPath: "/" // Same as `output.publicPath` in most cases.
}));
app.use(require("webpack-hot-middleware")(compiler));

app.listen(5000, function () \{
  console.log("Listening on port 5000!");
});
endsnippet

snippet rnp "return new Promise" b
return new Promise((resolve, reject) => {
	$2
});

endsnippet
snippet then "promise then" w
then(r => {
$1
}).catch(err => {
	console.error(err)
});
endsnippet

snippet arrow "() => {}" w
($1) => { $2 }
endsnippet

snippet myerrorn "Custom Error Func" b
function ${1:userError}(message: string) {
	const error = Error(message);
	error.message = message;
	if (Error.captureStackTrace) {
		Error.captureStackTrace(error, $1);
	}
	return error
}
endsnippet
