"--------------------------------------------------------------------------------
" Configurations for Vim ( +lua, +python )
" Jyd  2019-12-31 12:50
"--------------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

let $VIMFILES=fnamemodify(resolve(expand('<sfile>:p')), ':h')
set rtp^=$VIMFILES

set nocscopeverbose

if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

if $VIM_MODE =~ 'man'
  source $VIMFILES/bundles-man.vim
else
  source $VIMFILES/bundles.vim
endif

set rtp+=$VIMFILES/after

filetype plugin on
filetype indent on
set ruler
set showcmd
set shiftwidth=2
set tabstop=2
set expandtab
set nowrap
set hlsearch
set incsearch
set number
set relativenumber
set ignorecase smartcase " Only be case sensitive when search contains uppercase
set nocursorcolumn
set hidden " allow we leave from the current modified buffer
set autoindent
set smartindent
set nobackup nowb noswf
set nowritebackup
set backupcopy=yes
set showmatch
set cmdheight=2
set history=100
" enable mouse
set mouse=a
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes
set foldlevelstart=3 "Open most of the folds by default. If set to 0, all folds will be closed. 
set foldnestmax=10 "Folds can be nested. Setting a max value protects you from too many folds.
set foldmethod=manual "fold based on indent
" Eliminating delays on ESC
set timeoutlen=1000 ttimeoutlen=30
set scrolloff=2
set guioptions-=T
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,gb2312,cp936,gbk,gb18030
set wildmenu " show a navigable menu for tab completion
set wildmode=list:longest,full
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
set wildignore+=*DS_Store
set completeopt=menuone,longest,preview

if has("gui_running") && !has('gui_vimr')
  set ballooneval
  set balloondelay=100
endif

if has('termguicolors')
  set termguicolors
  " Correct RGB escape codes for vim inside tmux
  if !has('nvim') && $TERM ==# 'screen-256color'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

" Keep screen after vim exited
"set t_ti= t_te=

set path=.,./include/**/*,/usr/local/include,/usr/include

" Default sh is Bash
let g:bash_is_sh=1

" define a group `vimrc` and initialize it.
augroup vimrc
  autocmd!
augroup END

"persistent undo
set undodir=$HOME/undodir
set undolevels=1000 "maximum number of set changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload
set undofile

" copy & paste
set clipboard+=unnamed
vnoremap p "_dP

"define leader char
let g:mapleader = ","
let g:maplocalleader = ","

"status line
set statusline=\ %F%m%r%h\ %w\ %y\ %{getcwd()}\ \ \ Line:\ %l/%L:%c
set laststatus=2

" set default help language to zh_CN
" set helplang=cn
" language message zh_CN.utf-8

if has("win32") && has('termencoding')
  set termencoding=gb2312
endif

" enable syntax highlighting
syntax on
syntax sync minlines=256
set synmaxcol=300

if has("win32")
  source $VIMRUNTIME/mswin.vim
endif

if has('directx')
  set renderoptions=type:directx,level:0.75,gamma:1.25,contrast:0.5,
                        \geom:1,renmode:5,taamode:1
endif

" Editing a protected file as 'sudo'
"cmap W w !sudo tee % >/dev/null
command! W w !sudo tee % > /dev/null

" easytags: slow
"--------------------------------------------------------------------------------
" look tags in directory the current file in, and working directory,
" and looking up and up until /
set tags=./tags,tags;/
let g:easytags_dynamic_files = 1
let g:easytags_always_enabled=0
let g:easytags_on_cursorhold=0
let g:easytags_events = []

function! UpdateTags()
  execute ":silent !ctags -R –languages=C++ –c++-kinds=+p –fields=+iaS –extra=+q ./"
  execute ":redraw!"
  echohl StatusLine | echo "C/C++ tags updated" | echohl None
endfunction
command! CTags :call UpdateTags()

" IME settings
"--------------------------------------------------------------------------------
"On mac os x, disable IME when we enter normal mode
function! Ime_en()
  let input_status = system('im-select')
  if input_status =~ "com.apple.keylayout.ABC"
    let b:inputtoggle = 0
  else
    let b:inputtoggle = 1
    call system('im-select com.apple.keylayout.ABC') "use en ime
  endif
endfunction

function! Ime_zh()
  try
    if b:inputtoggle == 1
      call system('im-select com.apple.inputmethod.SCIM.ITABC')
    endif
  catch /inputtoggle/
    let b:inputtoggle = 0
  endtry
endfunction

if has("mac")
  au! vimrc InsertLeave * call Ime_en()
  au! vimrc InsertEnter * call Ime_zh()
endif


let g:PaperColor_Theme_Options = {
      \   'theme': {
      \     'default.light': {
      \       'transparent_background': 1,
      \       'allow_bold': 1,
      \       'allow_italic': 0
      \     }
      \   },
      \   'language': {
      \     'python': {
      \       'highlight_builtins' : 1
      \     },
      \     'cpp': {
      \       'highlight_standard_library': 1
      \     },
      \     'c': {
      \       'highlight_builtins' : 1
      \     }
      \   }
      \ }

" Set background according to iterm.app's profile
if $ITERM_PROFILE ==# "dark"
  set background=dark
else 
  set background=light
endif
color PaperColor

if &background ==# 'light'
  exec 'hi SignColumn guibg=#eeeeee'
endif

"font
if has("gui_running")
  let s:font_size=17
  let s:fontbase="Bitstream_Vera_Sans_Mono"
  if has("mac")
    " let s:fontbase="PT_Mono"
    let s:fontbase="Iosevka-Fixed"
    " let s:fontbase="SourceCodePro-Light"
    " let s:fontbase="SF_Mono"
    let s:fontwide="PingFangSC-Light"
  else
    " let s:fontbase="Ubuntu_Mono"
    " let s:fontbase="Anonymous_Pro"
    " let s:fontbase="Source_Code_Pro"
    let s:fontbase="Ubuntu_Mono"
    let s:fontwide="NSimSun"
  endif

  if !has('gui_vimr')
    execute "set guifont=". s:fontbase . ":h" . s:font_size
    execute "set guifontwide=". s:fontwide . ":h" . s:font_size
  endif

  map <leader>fi :call <SID>IncFontSize()<CR>
  map <leader>fo :call <SID>DecFontSize()<CR>
endif

function! s:IncFontSize()
  let s:font_size+=1
  execute "set guifont=". s:fontbase . ":h" . s:font_size
  execute "set guifontwide=". s:fontwide . ":h" . s:font_size
  echom s:font_size
endfunction

function! s:DecFontSize()
  let s:font_size-=1
  execute "set guifont=". s:fontbase . ":h" . s:font_size
  execute "set guifontwide=". s:fontwide . ":h" . s:font_size
  echom s:font_size
endfunction

"insert a blank line
imap <C-Return> <CR><CR><C-o>k<Tab>

" Quick editing myvimrc
"--------------------------------------------------------------------------------
if !exists("$MYVIMRC")
  let $MYVIMRC = expand("<sfile>:p")
endif
map <leader>ev :e! $MYVIMRC<CR>
map <leader>eb :e! $VIMFILES/bundles.vim<CR>
map <leader>s :source %<CR>

"Smart way to move btw. windows
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

"Use the arrows to something usefull
map <M-right> :bn<cr>
map <M-left> :bp<cr>

"Switch to current dir
map <leader>cd :lcd %:p:h<cr>:pwd<cr>

"Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

"quick switch to normal mode
imap jj <ESC>
imap jk <ESC>

"Move to begin of line / end to line
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I
cnoremap <C-a> <C-b>

"Start browser
if has("win32")
  "quick start IE
  nmap <leader>ie :update<cr>:silent !start ie.bat "file://%:p"<cr>
  "start chrome
  nmap <leader>ch :update<cr>:silent !start "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" "file://%:p"<cr>
endif
if has("mac")
  nmap <leader>ch :update<cr>:silent !open -a "Google Chrome" "file://%:p"<cr>:redraw!<cr>
endif


"pascal configuration
"--------------------------------------------------------------------------------
autocmd vimrc BufReadPost *.pas,*.dpr set suffixesadd=.pas,.dpr,.txt,.dfm,.inc

"javascript
"--------------------------------------------------------------------------------
autocmd vimrc FileType javascript,typescript setlocal dictionary=$VIMFILES\dict\javascript.dict
let g:tern_map_keys=1
let g:tern_show_argument_hints='on_hold'
let g:tern_show_signature_in_pum=1

"vim-json
let g:vim_json_syntax_conceal = 0

"emmet-vim
let g:user_emmet_leader_key=','

"python
"--------------------------------------------------------------------------------
let g:pydiction_location=$VIMFILES . '/plugged/pydiction/complete-dict/'
let g:pydiction_menu_height = 20

"FindFile
"--------------------------------------------------------------------------------
let g:FindFileIgnore = ['*.o', '*.pyc', '*/tmp/*', '.svn', '.git', '*.exe', '*.dll']

" UltiSnips
"--------------------------------------------------------------------------------
" Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<C-k>"
let g:UltiSnipsListSnippets="<C-l>"
let g:UltiSnipsJumpForwardTrigger="<C-k>"
let g:UltiSnipsJumpBackwardTrigger="<C-p>"
let g:UltiSnipsEditSplit='horizontal'
let g:UltiSnipsSnippetDirectories = ["UltiSnips"]
let g:UltiSnipsSnippetsDir=expand('$VIMFILES/mysnippets/ultisnips')
set rtp+=$VIMFILES/mysnippets

" t.vim
let g:mysnippets_dir = expand("$VIMFILES/mysnippets")

"ctrlp settings
"--------------------------------------------------------------------------------
let g:ctrlp_custom_ignore = {
                              \ 'dir':  '\v[\/]\.(git|hg|svn|node_modules)$',
                              \ 'file': '\v\.(exe|so|dll)$',
                              \ 'link': 'some_bad_symbolic_links',
                              \ }
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_files = 5000
let g:ctrlp_max_depth = 20

" cmake
"--------------------------------------------------------------------------------
autocmd vimrc BufRead,BufNewFile *.cmake,CMakeLists.txt,*.cmake.in setf cmake
autocmd vimrc BufRead,BufNewFile *.ctest,*.ctest.in setf cmake
let g:cmake_build_type='Debug'
let g:cmake_export_compile_commands=1
let g:cmake_ycm_symlinks=1

" vim-surroud
"--------------------------------------------------------------------------------
let g:surround_indent = 0 " Disable indenting for surrounded text
let g:surround_{char2nr("r")} = "💥 \r 💥"

" markdown
"--------------------------------------------------------------------------------
let g:vim_markdown_folding_disabled=0
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_folding = 2
let g:instant_markdown_autostart = 0
let g:instant_markdown_slow = 1

" there are some defaults for image directory and image name, you can change them
let g:mdip_imgdir = 'images'
" let g:mdip_imgname = 'image'
let s:mdctags_path = expand('$VIMFILES').'/tools/markdown2ctags.py'

let g:tagbar_type_markdown = {
            \ 'ctagsbin'  : s:mdctags_path,
            \ 'ctagsargs' : '-f - --sort=yes',
            \ 'kinds' : [
            \     's:sections',
            \     'i:images',
            \     '?:unknown',
            \   ],
            \ 'sro' : '|',
            \ 'kind2scope' : {
            \     's' : 'section',
            \   },
            \ 'sort': 0,
            \ }

"gulp
"--------------------------------------------------------------------------------
autocmd vimrc BufRead,BufNewFile gulpfile.js setlocal errorformat=%-G[%.%#,%f:%m,%-G%p,%-G%n%perror

"livedown
"--------------------------------------------------------------------------------
let g:livedown_autorun = 0

" should the browser window pop-up upon previewing
let g:livedown_open = 1


"ALE
"--------------------------------------------------------------------------------
let g:ale_linters = {'javascript': ['eslint'], 'typescript': ['eslint', 'tslint', 'tsserver'],
    \ 'go': ['gofmt'],
    \ 'python': []
    \}

let g:ale_pattern_options = {
      \ '\.min.js$': {'ale_enabled': 0},
      \ '\v\.(m|mm|cpp|cxx|cc|h|hpp)$': {'ale_enabled': 0},
      \ '\v\.py$': {'ale_enabled': 0 }
      \}


" tcomment
"--------------------------------------------------------------------------------
let g:tcomment#options_comments = {'whitespace': 'left'}
let g:tcomment#options_commentstring = {'whitespace': 'left'}

" nerdcommenter
"--------------------------------------------------------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1


" jedi settings
"--------------------------------------------------------------------------------
let g:jedi#completions_enabled=0

" tagbar settings
"--------------------------------------------------------------------------------
map <leader>t :TagbarToggle<cr>
let g:tagbar_compact = 1
if filereadable($VIMFILES . '/tagbar.conf')
    source $VIMFILES/tagbar.conf
endif


" vim-session settings
"--------------------------------------------------------------------------------
let g:session_autosave='no'
let g:session_autoload='no'

" airline settings
"--------------------------------------------------------------------------------
let g:airline#extensions#tagbar#enabled = 0
let g:airline_section_b = '' "'%-20{getcwd()}'
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#coc#enabled = 1


" Search the selected text
"--------------------------------------------------------------------------------
function! s:getSelectedText()
  let l:old_reg = getreg('"')
  let l:old_regtype = getregtype('"')
  norm gvy
  let l:ret = getreg('"')
  call setreg('"', l:old_reg, l:old_regtype)
  exe "norm \<Esc>"
  return l:ret
endfunction
vnoremap <silent> * :call setreg("/",
    \ substitute(<SID>getSelectedText(),
    \ '\_s\+',
    \ '\\_s\\+', 'g')
    \ )<Cr>n

vnoremap <silent> # :call setreg("?",
    \ substitute(<SID>getSelectedText(),
    \ '\_s\+',
    \ '\\_s\\+', 'g')
    \ )<Cr>n
"--------------------------------------------------------------------------------

" fzf: File searching
"--------------------------------------------------------------------------------
if filereadable('/usr/local/opt/fzf/plugin/fzf.vim')
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit'
    \}

  let g:ctrlp_map = ''

  if has('nvim-0.4.0') || has("patch-8.2.0191")
      let g:fzf_layout = { 'window': {
                  \ 'width': 0.9,
                  \ 'height': 0.7,
                  \ 'highlight': 'Comment',
                  \ 'rounded': v:false } }
  else
      let g:fzf_layout = { "window": "silent botright 16split enew" }
  endif

  " fzf binding
  nnoremap <C-P> :Files<CR>
  nnoremap <leader>ff :Files<CR>
  nnoremap <leader>fb :Buffers<CR>
  nnoremap <leader>b :Buffers<CR>
  nnoremap <leader>fh :History<CR>

  function! s:search_template(arg, bang)
    let all = len(&ft) == 0 || a:arg =~ 'a'
    call fzf#vim#files((all? $SNIPPETS : $SNIPPETS . '/' . &ft), 
          \ fzf#vim#with_preview({'sink': 'r'}),
          \ a:bang)
  endfunction

  command! -bang -nargs=? Ft call s:search_template(<q-args>, <bang>0)
  nmap <leader>ft :Ft<CR>
else
  nnoremap <leader>b :CtrlPBuffer<CR>
endif

" The Silver Searcher
"--------------------------------------------------------------------------------
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  set grepformat=%f:%l:%c%m

  "Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  "let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  "Note that other CtrlP options related to which files get included in the index
  "(g:ctrlp_show_hidden, wildignore, g:ctrlp_custom_ignore, g:ctrlp_max_files, g:ctrlp_max_depth, g:ctrlp_follow_symlinks)
  "do not apply when using g:ctrlp_user_command.
  let g:ctrlp_user_command = 'ag %s -l --nocolor --nogroup
         \ --ignore .git --ignore .svn --ignore .hg --ignore .DS_Store
         \ --ignore .cache --ignore .npm --ignore .idea --ignore .m2 -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " Ag command
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
endif


"Man
"--------------------------------------------------------------------------------
runtime ftplugin/man.vim

"vim-easy-align
"--------------------------------------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"load local customized script
"--------------------------------------------------------------------------------
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif

"Convert selected text to javascript string
"--------------------------------------------------------------------------------
function! s:ToJS(sep, first_line, last_line)
    let i = a:first_line
    while i<=a:last_line
      let l = getline(i)
      let l = substitute(l, a:sep, "\\\\".a:sep, "g")
      if i==a:last_line
        call setline(i, a:sep . l . a:sep . ";" )
      else
        call setline(i, a:sep . l . a:sep . " + " )
      endif
      let i=i+1
    endwhile
endfunction
command!  -nargs=1 -range ToJs call s:ToJS(<q-args>, <line1>, <line2>)

"Apply macro on selected lines
"--------------------------------------------------------------------------------
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

"NERDTree
"--------------------------------------------------------------------------------
noremap <F3> :NERDTreeToggle<cr>
noremap <leader>nf :NERDTreeFind<cr>
let g:NERDTreeWinSize=40

" Quick unescape xml entities
"--------------------------------------------------------------------------------
function! XmlUnescape()
  silent! execute ':%s/&lt;/</g'
  silent! execute ':%s/&gt;/>/g'
  silent! execute ':%s/&amp;/\&/g'
endfunction
command! -nargs=0 XmlUnescape :call XmlUnescape()
nnoremap <leader>xf :call XmlUnescape()

" Unescape \uXXXX sequences in selected lines
"--------------------------------------------------------------------------------
function! UnescapeUnicode() range
  let cmd = a:firstline . "," . a:lastline . 's/\\u\(\x\{4\}\)/\=nr2char("0x".submatch(1),1)/g'
  silent! execute cmd
endfunction
command! -nargs=0 -range=% UnescapeUnicode :<line1>,<line2>call UnescapeUnicode()

" Convert rows of numbers or text (as if pasted from excel column) to a tuple
"--------------------------------------------------------------------------------
function! ToTupleFunction() range
    silent execute a:firstline . "," . a:lastline . "s/^/'/"
    silent execute a:firstline . "," . a:lastline . "s/$/',/"
    silent execute a:firstline . "," . a:lastline . "join"
    silent execute "normal I("
    silent execute "normal $xa)"
    silent execute "normal ggVGYY"
endfunction
command! -range ToTuple <line1>,<line2> call ToTupleFunction()

" Dot
"--------------------------------------------------------------------------------
function! Dot(bang, format)
    let fmt = a:format
    if empty(fmt)
      let fmt = 'png'
    endif
    let cmd = '!dot'
    let opt = ' -T' . fmt . ' -o '
    let currfile = expand('%:p')
    let outfile = expand('%:p:r') . '.' . fmt
    echom opt
    silent execute cmd . ' "' . currfile . '" '. opt . ' "' . outfile . '" '
    if a:bang
      call system('open ' . outfile)
    endif
endfunction
command! -nargs=* -bang Dot :call Dot(<bang>0, <q-args>)|redraw!
let g:WMGraphviz_output = "svg"

let g:previm_open_cmd = 'open -a "google chrome"'

" vim-go / golang
"--------------------------------------------------------------------------------
let g:go_fmt_fail_silently = 1
" let g:go_highlight_structs=0
" let g:go_highlight_interfaces = 0
" let g:go_highlight_operators = 0
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_parameters=1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_snippet_engine='ultisnips'
" let g:go_autodetect_gopath=1
let g:go_doc_popup_window = 1

" abbrev
autocmd vimrc Filetype go ca <buffer> ips GoImports
autocmd vimrc Filetype go noremap <buffer> <F5> :GoBuild<cr>
autocmd vimrc Filetype go command! -buffer -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd vimrc Filetype go command! -buffer -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd vimrc Filetype go command! -buffer -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd vimrc Filetype go command! -buffer -bang AT call go#alternate#Switch(<bang>0, 'tabe')

" clang_format
"--------------------------------------------------------------------------------
let g:clang_format#style_options = {
            \ "ColumnLimit": 0,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++17"}

" let g:clang_format#command='/usr/local/bin/clang-format'
autocmd vimrc FileType c,cpp,objc,objcpp nnoremap <buffer> <Leader>cf :<C-u>ClangFormat<CR>
autocmd vimrc FileType c,cpp,objc,objcpp vnoremap <buffer> <Leader>cf :ClangFormat<CR>
autocmd vimrc FileType c,cpp,objc,objcpp nmap <buffer> <Leader>C :ClangFormatAutoToggle<CR>

" YCM & Coc.nvim
"--------------------------------------------------------------------------------
" whitelist for YCM
let g:filetype_use_ycm = ["c", "cpp", "objc", "objcpp"]
if exists("$YCM_FILES") 
  let g:filetype_use_ycm = split(expand("$YCM_FILES"), ",")
endif

if $VIM_MODE =~ 'ycm'
  " ycm
  source $VIMFILES/config-ycm.vim
else
  " ycm
  source $VIMFILES/config-ycm.vim

  " coc.nvim
  source $VIMFILES/config-coc.vim
endif

" victionary
"--------------------------------------------------------------------------------
let g:victionary#map_defaults = 0

" Polyglot
"--------------------------------------------------------------------------------
let g:polyglot_disabled=['typescript', 'go']

" Draw ascii box
"--------------------------------------------------------------------------------
map <leader>tsk :call ToggleSketch()<CR>

" Any-jump
"--------------------------------------------------------------------------------
let g:any_jump_disable_default_keybindings = 1
let g:any_jump_search_prefered_engine = 'ag'

" Jump to definition under cursore
nnoremap gs :AnyJump<CR>

" Visual mode: jump to selected text in visual mode
xnoremap gs :AnyJumpVisual<CR>
" open last closed search window again
nnoremap gl :AnyJumpLastResults<CR>

" Disable tmux navigator when zooming the Vim pane
"--------------------------------------------------------------------------------
let g:tmux_navigator_disable_when_zoomed = 1


" EasyMotion 
"--------------------------------------------------------------------------------
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Load machine specific configurations
"--------------------------------------------------------------------------------
if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif
